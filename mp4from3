#!/usr/bin/perl
use 5.018 ; use strict ; use warnings ; 
use feature qw[say] ;
use File::Temp ; 
use Getopt::Std ; 
getopts 'a:d:g:lny1D', \my %o ; 
use Term::ANSIColor qw[uncolor colorstrip :constants] ; $Term::ANSIColor::AUTORESET = 1 ;
use Time::HiRes qw[gettimeofday tv_interval] ; 
my $time_start = [ gettimeofday ] ; 

#say "@ARGV" ; exit ;
my @tgt = grep { $o{D} ? m/mp4$/i : m/mp3$/i } ( @ARGV ? @ARGV : glob '*' ) ;
my $N = $o{n} ? "\\\n" : '' ; # 生成するコマンド文の途中に '\'の後に改行文字を、挿入するため。

my $filetmp ; 
# 一時ファイルである 16x16 の画像ファイル のjpg形式ファイルを作る。
if ( ! defined $o{g} ) 
{ 
$filetmp = File::Temp -> new ( UNLINK => 1 , suffix => '.bmp') ;
my $trs = q[
ffd8ffe000104a46494600010102001c001c0000ffdb004300030202020202030202020303030304
060404040404080606050609080a0a090809090a0c0f0c0a0b0e0b09090d110d0e0f101011100a0c
12131210130f101010ffdb00430103030304030408040408100b090b101010101010101010101010
1010101010101010101010101010101010101010101010101010101010101010101010101010ffc0
0011080010001003011100021101031101ffc4001600010101000000000000000000000000000503
07ffc4001f1000020202030003000000000000000000010204050311000621071314ffc400160101
010100000000000000000000000000040102ffc4001f110002020202030100000000000000000001
0200031104211213224151ffda000c03010002110311003f00ce70ddcec631b2e62c49f542fbc5f8
867332abd4f114ef70fb5595640b9ac8eef2541d8d689e5d86a88ca9e632b0d9c911ce8f530e37e8
bcb4c2acb0c6d10fa0f0db62c0e29fd974a8258b37c909ff002e5865b13f44143850e94686b984ae
aabd446b2f71ccffd9] ; 
   print {$filetmp} pack 'H*', $trs =~ s/[ \t\n]//gr 
} # ; $t #; close $t  ;$t 
 
my $image = $o{g} // $filetmp ; #do 
$image = ITALIC BOLD $image ;

END {
  #unlink $image if ! defined $o{g} ; 
  my $elapsed = sprintf "%0.4f" , tv_interval ( $time_start , [ gettimeofday ] ) ;
  say STDERR BLUE BOLD "--- $elapsed seconds has spent." ;
}


for ( @tgt  ) {
  my ($cmd, $from, $to)  = ( q[] , undef, undef )  ;
  if ( $o{D} ) { $cmd = RED BOLD qq [ rm $_ ] }
  else { 
    $from = BOLD $_ ;
    s/[-]//g ; 
    s/[_+ ]/_/g ; 
    s/\.mp3$/.mp4/i ;
    $to = BOLD $_ ; 
    $cmd .= "time " ;
    $cmd .= ITALIC BOLD qq[ffmpeg ] ; 
    $cmd .= qq[-loop 1 -i $image -i '$from' $N] ; 
    $cmd .= " -c:v libx264 -tune stillimage " ; 
    $cmd .= " -c:a aac -strict experimental " ; 
    $cmd .= " -b:a 192k -pix_fmt yuv420p " ; 
    $cmd .= " -shortest '$to' ;" ;
  }
  $cmd = colorstrip $cmd if $o{1} ;  # <-- トリッキーかも。 colorstrip と uncolor の違いが気になり中。
  say $cmd if ! $o{l} ; 
  say "$from\t-->\t$to" if ! $o{D} && $o{l} ;	
  my $yN = $o{y} ? 'y' : 'N' ;
  $cmd = $o{y} ? ' yes $yN | ' . colorstrip $cmd : colorstrip $cmd ;  # <-- トリッキーかも。  # *5 
  if ( ($o{d}//'') eq 'o' ){ 
    qx[$cmd] ; 
    $cmd = colorstrip "ls -l $from $to" ;
    say YELLOW $cmd ;
    system qq[$cmd] ;
  } ; # -do または -d o というオプションになっていたら、生成したコマンド文を実行する。
}


#say STDERR BOLD CYAN "-- In order to actually run the convert program, do as `$0 -do @ARGV '" unless ($o{d}//'') eq 'o' ; 
say STDERR BOLD CYAN "-- In order to actually run the convert program, do as `$0 -do ...'" unless ($o{d}//'') eq 'o' ; 

## ヘルプの扱い
sub VERSION_MESSAGE {}
sub HELP_MESSAGE {
  use FindBin qw[ $Script ] ; 
  $ARGV[1] //= '' ;
  open my $FH , '<' , $0 ;
  while(<$FH>){
    s/\$0/$Script/g ;
    print $_ if s/^=head1// .. s/^=cut// and $ARGV[1] =~ /^o(p(t(i(o(ns?)?)?)?)?)?$/i ? m/^\s+\-/ : 1;
  }
  close $FH ;
  exit 0 ;
}

=encoding utf8

=head1 

  $0 [ファイル名|ファイル名のパターン] [繰り返し] ..

    MP3形式ファイル(音声ファイル)をMP4形式ファイル(動画)に変換する。
    -do などのオプション無しだとコマンド文を出力することをだけをして完了する。
    このコマンドを実行すると、ファイル名を引数として指定しない限り、
    そのディレクトリ(カレントディレクトリ)に含まれている拡張子が.mp3のファイルを全て使う。
    -g FILE で画像ファイルを指定しない場合、4x4の灰色の静止画を、映像として使用する。
    変換したmp4形式のファイル名は、YouTubeでアップロードができるように、ファイル名中のハイフンとアンダースコアと空白文字とが除去される。


 コマンド例 : 

   $0 FILE.mp3  # mp3 ファイルを mp4 ファイルに変換するコマンド文を標準出力に出力。
   $0 -do FILE.mp3  # コマンド文(ffmpegのコマンド文)を実際に実行する。
   $0 -D -do FILE.mp4 # file.mp3ファイルの変換先である file.mp4があると書き込めないので、それを除去する。

   $0 -do   # このコマンドを実行するカレントディレクトリと同じディレクトリ内の全ての mp3 ファイルを mp4ファイルに変換する。

 オプション :

    -do  : 生成するコマンド文を、システム上で実行する。(単にコマンド文を見せるだけではない。)
    -g FILE : 静止画のファイル。縦の長さも横の長さも偶数である必要がある。jpgとpngで動作する。(graphic)
    -l : 元のmp3ファイルがどう変換されるかを(TSV形式で)出力する。(list)
    -n : コマンド文を視覚的に 分かりやすくするために、改行文字を途中に挿入して、元々長いコマンド文の出力の横幅を狭くする。
    -y : 上書きを許す。(この指定が無い場合、mp3からmp4に変換した際に、ファイルを書き込むときに、途中で止まることになる。)

    -1 : コマンド文の出力に色の加工をしない。(太字やイタリック体にする加工をしなくなる。)
    -D : 上書きされるはずのファイルの削除。ファイル名を指定しないと、そのディレクトリの*.mp3を対象にする。(Delete)


    --help :  オンラインヘルプマニュアルを表示する。(この画面と同じである。)

 注意 : 

   * このコマンドは システムに ffmpeg がインストールされていることを前提とする。OSXなら brew intall ffmpeg 実行するなどすること。
   * ffmpeg が上書きするかどうか聞いてくるかもしれない。その場合は、mp4from3 -D を試すのが良い。もっともプリミティブな方法は、そのmp4ファイルを手で消すこと。
   * 画像ファイルをいろいろコマンドラインで操作する場合は、ImageMagickが便利であろう。
   * -do 無しだと、実際は実行されないコマンド文が出力されるが、その中に画像の一時ファイルの名前が含まれる場合がある。そのファイルはすぐ消される。
   * -y のあるなしにより、yes y | ...  を利用している。yes N | ffmpeg .. が意図通りに動作はしてなかった。 (*5) 

 
 作成メモ : 

   1. 最初は2019年6月7日(金)に購入した英語の教材の本に付属していたmp3形式の音声ファイルをYouTubeで非公開で聞くことが
     できたら、音声再生の速度が調整などできて便利であると考えて、このプログラムを再生。(Japan Timesだった。)
   2. 同じ年の2019年7月1日(月) に少し改良。さらに1〜3回くらい改良。
   3. 2022年7月4日(月) と7月6日(水) に、それまで、加えたかった要素を大幅に加えた。
   4. 2022年7月19日(火)に、-g オプションを追加(jpgとpngは確かめた。gifはどうさせず)。コマンド文を色加工して分かりやすくした。-aを除去。-Dも追加。

 作成者 : 下野寿之

=cut

